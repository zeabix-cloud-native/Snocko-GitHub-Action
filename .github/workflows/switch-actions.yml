name: Switch workflow

on:
  push:
    branches:
      - main

env:
  owner: "${{ github.repository_owner }}"                       # Get owner name
  CIRCLE_API_TOKEN: '${{ secrets.CIRCLE_API_TOKEN }}'           # Circle API token
  CIRCLECICONTEXTID: '${{ secrets.CIRCLECICONTEXTID }}'         # CIRCLECICONTEXTID secret variable
  switch: ${{ inputs.switch }}                                  # Get value of workflow_dispatch
  GH_TOKEN: ${{ secrets.GH_CMD }}                               # Github organization PAT
  SECRET_NAME: "CICD"                                           # Github secret name

jobs:
  
#  check-provider:
#    runs-on: ubuntu-latest                                      # OS selection for run
#    outputs:
#      provider: ${{ steps.providervalue.outputs.PROVIDERVALUE }}
#    steps: 
#      - name: Check out                                         # step name "Check out" 
#        uses: actions/checkout@v3                               # checkout repository
#      - name: Check provider value
#        shell: bash                                             # Use bash shell
#        id: providervalue
#        run: |
#          export PROVIDERVALUE=$(cat provider.yaml| yq '.provider')
#          echo "PROVIDERVALUE=$(cat provider.yaml| yq '.provider')" >> $GITHUB_OUTPUT
#          echo Current Provicer = $PROVIDERVALUE
#      
#  change-to-circleci:
#    runs-on: ubuntu-latest
#    needs: check-provider
#    if: ${{needs.check-provider.outputs.provider == 'circleci' }} 
#    steps:
#      - name: check status
#        shell: bash                                             # Use bash shell
#        run: |
#          echo ${{needs.check-provider.outputs.provider}}
#
#  change-to-githubactions:
#    runs-on: ubuntu-latest
#    needs: check-provider
#    if: ${{needs.check-provider.outputs.provider == 'githubactions' }} 
#    steps:
#      - name: check status
#        shell: bash                                             # Use bash shell
#        run: |
#          echo ${{needs.check-provider.outputs.provider}}
  
  githubactions:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v3
      - name: Check duplicate repositories
        shell: bash
        run: |
          yq '.repositories.provider.github-actions[]' repositories.yaml > github-actions-repositories.yaml
          yq '.repositories.provider.circleci[]' repositories.yaml > circleci-repositories.yaml
          #ls -lah
          echo -------------------------------- Repositories are run on CircleCI --------------------------------
          cat circleci-repositories.yaml 
          echo -------------------------------- Repositories are run on Actions --------------------------------
          cat github-actions-repositories.yaml
      - name: Compare repositories
        shell: bash
        run: |
          export compare=$(grep -F -f circleci-repositories.yaml github-actions-repositories.yaml)
          if [[ -z $compare ]]; then
            echo "Repositories are not duplicated"
            exit 0
          else
            echo "Repositories are duplicated"
            exit 1
          fi
      - name: check repository
        shell: bash
        run: |
          file="github-actions-repositories.yaml"
          while IFS= read -r line; do
                if [[ $line == ${{ github.event.repository.name }} ]] ; then
                  echo "Actions repository match"
                  mkdir switch-actions
                  cd switch-actions
                  while read -r repo; do
                      echo "Processing repository $line"
                      mkdir "$repo"
                      cd $repo
                      echo "echo Get workflows id"
                      gh api \
                      -H "Accept: application/vnd.github+json" \
                      /repos/$owner/$repo/actions/workflows | jq '.workflows | .[].id' >> $repo-WorkflowId.txt
                      echo "################################################################"
                      echo "echo file $repo-WorkflowId before insert string"
                      cat $repo-WorkflowId.txt
                      echo "################################################################"
                      echo "/repos/$owner/$repo/actions/workflows/" >> $repo-WorkflowPath.txt
                      echo "echo file $repo-WorkflowPath.txt"
                      cat $repo-WorkflowPath.txt
                      echo "################################################################"
                      ## replace workflow id
                      sed -ie 's/^/\/repos\/'$owner'\/'$repo'\/actions\/workflows\//' $repo-WorkflowId.txt
                      sed -ie 's/$/\/enable/' $repo-WorkflowId.txt
                      echo "echo file $repo-WorkflowId after insert string"
                      cat $repo-WorkflowId.txt
                      echo "################################################################"
                      echo "Enabling $repo workflows"
                      file=$repo-WorkflowId.txt
                      while read -r ID; do
                          gh api \
                           --method PUT \
                           -H "Accept: application/vnd.github+json" \
                           $ID
                      done <$file
                      echo "################################################################"
                      echo "Enabled $line workflows"
                      echo "################################################################"
                      cd .. 
                  done <$file
                  exit 0
                else
                  echo "Actions repository does not match"
                  file="circleci-repositories.yaml"
                  while read -r circle; do
                      echo "Processing repository $line"
                      mkdir "$circle"
                      cd $circle
                      echo "echo Get workflows id"
                      gh api \
                      -H "Accept: application/vnd.github+json" \
                      /repos/$owner/$circle/actions/workflows | jq '.workflows | .[].id' >> $circle-WorkflowId.txt
                      echo "################################################################"
                      echo "echo file $circle-WorkflowId before insert string"
                      cat $circle-WorkflowId.txt
                      echo "################################################################"
                      echo "/repos/$owner/$circle/actions/workflows/" >> $circle-WorkflowPath.txt
                      echo "echo file $circle-WorkflowPath.txt"
                      cat $circle-WorkflowPath.txt
                      echo "################################################################"
                      ## replace workflow id
                      sed -ie 's/^/\/repos\/'$owner'\/'$circle'\/actions\/workflows\//' $circle-WorkflowId.txt
                      sed -ie 's/$/\/disable/' $circle-WorkflowId.txt
                      echo "echo file $circle-WorkflowId after insert string"
                      cat $circle-WorkflowId.txt
                      echo "################################################################"
                      echo "Disabling $circle workflows"
                      file=$circle-WorkflowId.txt
                      while read -r IDis; do
                          gh api \
                           --method PUT \
                           -H "Accept: application/vnd.github+json" \
                           $IDis
                      done <$file
                      echo "################################################################"
                      echo "Disabled $line workflows"
                      echo "################################################################"
                      cd .. 
                  done <$file
                  exit 0
                fi
          done <$file
      - name: Get enable Github actions workflows                # step name "Get Github actions workflows status"
        shell: bash                                             # Use bash shell
        run: |                                                  # Run command line
          file="github-actions-repositories.yaml"
          while read -r line; do
              cd $line
              gh api \
              -H "Accept: application/vnd.github+json" \
              /repos/$owner/$line/actions/workflows | jq '.workflows | .[].id' >> $line-StatusId.txt
              echo "Get $line workflows status"
              file=$line-StatusId.txt
              while read -r STATUS; do
                  echo ID=$(gh api \
                  -H "Accept: application/vnd.github+json" \
                   /repos/$owner/$line/actions/workflows/$STATUS | jq '.id') 
                  echo NAME=$(gh api \
                  -H "Accept: application/vnd.github+json" \
                   /repos/$owner/$line/actions/workflows/$STATUS | jq '.name')
                  echo STATUS=$(gh api \
                  -H "Accept: application/vnd.github+json" \
                   /repos/$owner/$line/actions/workflows/$STATUS | jq '.state')
                   echo "----------------------------------------------------------------"
              done <$file
              echo "#################################################################"
              cd .. 
          done <$file 
      
      - name: Get Disable Github actions workflows status               # step name "Get Github actions workflows status"
        shell: bash                                             # Use bash shell
        run: |                                                  # Run command line
          file="circleci-repositories.yaml"
          while read -r line; do
              cd $line
              gh api \
              -H "Accept: application/vnd.github+json" \
              /repos/$owner/$line/actions/workflows | jq '.workflows | .[].id' >> $line-StatusId.txt
              echo "Get $line workflows status"
              file=$line-StatusId.txt
              while read -r STATUS; do
                  echo ID=$(gh api \
                  -H "Accept: application/vnd.github+json" \
                   /repos/$owner/$line/actions/workflows/$STATUS | jq '.id') 
                  echo NAME=$(gh api \
                  -H "Accept: application/vnd.github+json" \
                   /repos/$owner/$line/actions/workflows/$STATUS | jq '.name')
                  echo STATUS=$(gh api \
                  -H "Accept: application/vnd.github+json" \
                   /repos/$owner/$line/actions/workflows/$STATUS | jq '.state')
                   echo "----------------------------------------------------------------"
              done <$file
              echo "#################################################################"
              cd .. 
          done <$file 
 
#  switch-actions:                                               # Job name "switch-action"
#    runs-on: ubuntu-latest                                      # OS selection for run
#    needs: githubactions
#    steps:
#      - name: Check out                                         # step name "Check out" 
#        uses: actions/checkout@v3                               # checkout repository
#      - name: Create root directory                             # step name "Create root directory"
#        run: |                                                  # Run command line
#          mkdir switch-actions                                  # Create directory name switch-actions
#          cd switch-actions                                     # Change directory to switch-actions
#      - name: Enable Github actions workflows                   # step name "Enable Github actions workflows"
##        if: ${{ inputs.switch == 'githubactions'}}              # Condition if input value = githubactions
#        shell: bash                                             # Use bash shell
#        run: |                                                  # Run command line
#          file="github-actions-repositories.yaml"
#          while read -r line; do
#              echo "Processing repository $line"
#              mkdir "$line"
#              cd $line
#              echo "echo Get workflows id"
#              gh api \
#              -H "Accept: application/vnd.github+json" \
#              /repos/$owner/$line/actions/workflows | jq '.workflows | .[].id' >> $line-WorkflowId.txt
#              echo "################################################################"
#              echo "echo file $line-WorkflowId before insert string"
#              cat $line-WorkflowId.txt
#              echo "################################################################"
#              echo "/repos/$owner/$line/actions/workflows/" >> $line-WorkflowPath.txt
#              echo "echo file $line-WorkflowPath.txt"
#              cat $line-WorkflowPath.txt
#              echo "################################################################"
#              ## replace workflow id
#              sed -ie 's/^/\/repos\/'$owner'\/'$line'\/actions\/workflows\//' $line-WorkflowId.txt
#              sed -ie 's/$/\/enable/' $line-WorkflowId.txt
#              echo "echo file $line-WorkflowId after insert string"
#              cat $line-WorkflowId.txt
#              echo "################################################################"
#              echo "Enabling $line workflows"
#              file=$line-WorkflowId.txt
#              while read -r ID; do
#                  gh api \
#                   --method PUT \
#                   -H "Accept: application/vnd.github+json" \
#                   $ID
#              done <$file
#              echo "################################################################"
#              echo "Enabled $line workflows"
#              echo "################################################################"
#              cd .. 
#          done <$file
#
#      - name: Disable Github actions workflows                  # step name "Disable Github actions workflows"
##        if: ${{ inputs.switch == 'circleci'}}                   # Condition if input value = circleci
#        shell: bash                                             # Use bash shell
#        run: |                                                  # Run command line
#          file="github-actions-repositories.yaml"
#          while read -r line; do
#              echo "Processing repository $line"
#              mkdir "$line"
#              cd $line
#              echo "echo Get workflows id"
#              gh api \
#              -H "Accept: application/vnd.github+json" \
#              /repos/$owner/$line/actions/workflows | jq '.workflows | .[].id' >> $line-WorkflowId.txt
#              echo "################################################################"
#              echo "echo file $line-WorkflowId before insert string"
#              cat $line-WorkflowId.txt
#              echo "################################################################"
#              echo "/repos/$owner/$line/actions/workflows/" >> $line-WorkflowPath.txt
#              echo "echo file $line-WorkflowPath.txt"
#              cat $line-WorkflowPath.txt
#              echo "################################################################"
#              ## replace workflow id
#              sed -ie 's/^/\/repos\/'$owner'\/'$line'\/actions\/workflows\//' $line-WorkflowId.txt
#              sed -ie 's/$/\/disable/' $line-WorkflowId.txt
#              echo "echo file $line-WorkflowId after insert string"
#              cat $line-WorkflowId.txt
#              echo "################################################################"
#              echo "Disabling $line workflows"
#              file=$line-WorkflowId.txt
#              while read -r ID; do
#                  gh api \
#                   --method PUT \
#                   -H "Accept: application/vnd.github+json" \
#                   $ID
#              done <$file
#              echo "################################################################"
#              echo "Disabled $line workflows"
#              echo "################################################################"
#              cd .. 
#          done <$file
#
#      - name: Get Github actions workflows status               # step name "Get Github actions workflows status"
#        shell: bash                                             # Use bash shell
#        run: |                                                  # Run command line
#          file="github-actions-repositories.yaml"
#          while read -r line; do
#              cd $line
#              gh api \
#              -H "Accept: application/vnd.github+json" \
#              /repos/$owner/$line/actions/workflows | jq '.workflows | .[].id' >> $line-StatusId.txt
#              echo "Get $line workflows status"
#              file=$line-StatusId.txt
#              while read -r STATUS; do
#                  echo ID=$(gh api \
#                  -H "Accept: application/vnd.github+json" \
#                   /repos/$owner/$line/actions/workflows/$STATUS | jq '.id') 
#                  echo NAME=$(gh api \
#                  -H "Accept: application/vnd.github+json" \
#                   /repos/$owner/$line/actions/workflows/$STATUS | jq '.name')
#                  echo STATUS=$(gh api \
#                  -H "Accept: application/vnd.github+json" \
#                   /repos/$owner/$line/actions/workflows/$STATUS | jq '.state')
#                   echo "----------------------------------------------------------------"
#              done <$file
#              echo "#################################################################"
#              cd .. 
#          done <$file 